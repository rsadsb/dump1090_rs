use assert_hex::assert_eq_hex;
use byteorder::{BigEndian, ReadBytesExt};
use std::io::Cursor;

fn demod_iq(iq_buf: &[u8]) -> Vec<[u8; 14]> {
    let mut modes = dump1090_rs::Modes::default();
    let outbuf = &mut modes.next_buffer(2_400_000);

    let mut rdr = Cursor::new(&iq_buf);

    while let Ok(iq) = rdr.read_u16::<BigEndian>() {
        let this_mag: u16 = dump1090_rs::MAG_LUT[iq as usize];

        outbuf.push(this_mag);
    }
    dump1090_rs::demod_2400::demodulate2400(outbuf).unwrap()
}

#[test]
fn test_00() {
    let f_buffer = std::fs::read("tests/test_00.iq").unwrap();
    let resulting_data = demod_iq(&f_buffer);
    let expected_data = 
        [[0x8d, 0xa6, 0xd8, 0x57, 0xf8, 0x21, 0x0, 0x02, 0x00, 0x4a, 0xb8, 0xaa, 0xea, 0xdc]]
    ;
    assert_eq_hex!(expected_data, &*resulting_data);
}

#[test]
fn test_01() {
    let f_buffer = std::fs::read("tests/test_01.iq").unwrap();
    let resulting_data = demod_iq(&f_buffer);
    let expected_data = [
        [
            0x8d, 0xac, 0x74, 0x1c, 0xea, 0x48, 0x58, 0x64, 0x89, 0x3c, 0x8, 0xc8, 0xd2, 0x9e,
        ],
        [
            0x5d, 0xab, 0x1c, 0x04, 0x1b, 0xfb, 0x6b, 0x8b, 0x5a, 0x9c, 0xd9, 0xd3, 0x90, 0xe1,
        ],
        [
            0x8d, 0xac, 0x74, 0x1c, 0x58, 0xbf, 0x06, 0x23, 0x34, 0xe7, 0x67, 0x0c, 0x72, 0x50,
        ],
        [
            0x8f, 0xc0, 0x51, 0xe8, 0xf8, 0x03, 0x00, 0x06, 0x00, 0x5a, 0xbc, 0x45, 0xa4, 0x5f,
        ],
    ];
    assert_eq_hex!(expected_data, &*resulting_data);
}

#[test]
fn test_02() {
    let f_buffer = std::fs::read("tests/test_02.iq").unwrap();
    let resulting_data = demod_iq(&f_buffer);
    let expected_data = [
        [
            0x8d, 0xaa, 0x5d, 0x2e, 0x99, 0x0d, 0xa1, 0x05, 0xb0, 0x04, 0x4e, 0xb3, 0xf9, 0x8d,
        ],
        [
            0x8d, 0xa1, 0x3f, 0x12, 0x99, 0x0c, 0x50, 0x03, 0x68, 0x10, 0x0b, 0x0a, 0xe9, 0x85,
        ],
        [
            0x5d, 0x3c, 0x4e, 0xc7, 0x76, 0xb0, 0xb1, 0xc5, 0x12, 0xe2, 0xb1, 0x6e, 0x6b, 0xb4,
        ],
        [
            0x5d, 0x3c, 0x4e, 0xc7, 0x76, 0xb0, 0xb1, 0xc7, 0x32, 0xe2, 0x91, 0x6e, 0x63, 0xb6,
        ],
        [
            0x8d, 0xa1, 0x3f, 0x12, 0x59, 0x2c, 0x02, 0x58, 0x42, 0x69, 0xf4, 0x0f, 0x5b, 0x7d,
        ],
    ];
    assert_eq_hex!(expected_data, &*resulting_data);
}
